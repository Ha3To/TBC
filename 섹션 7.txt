#분기문 if

-if(조건문)
ㄴ if문의 기본 형태 -> if(expression)
		    statement
ㄴ expression이 true면 statement를 실행, false면 실행하지 않는다.
ㄴ 자신이 여러개의 조건문을 사용하고 싶다면 if문을 여러개 사용하면 된다.

-else
ㄴ else는 if문이 false라면 else문에 작성된 statement가 실행된다.
ㄴ if문에 사용되는 연산이 여러번하는 것을 줄여줌

===================================================================================================

#표준 입출력 함수 getchar(), putchar()

-getchar(int)
ㄴ 한글자를 가져오는 함수


-putchar(int)
ㄴ 한글자를 출력하는 함수

ㄴ 둘다 int형을 사용하는 이유는 아스키 코드를 사용하기 위함이다.
ㄴ getchar와 putchar를 사용하면 문자열도 간단하게 출력이 가능한데 그 이유는 배열로 문자열 처리하는게 아닌, 한글자씩 처리하기 때문이다.
ㄴ 이 과정을 좀 더 설명하자면, getchar함수는 사용자로부터 한글자를 입력받는데,
  실제로 사용하면 한번에 여러개의 글자를 입력해도 된다. 이때 'buffer'라는 개념이 사용되는데 buffer는 임시 저장소이다.
  여튼, buffer에 사용자가 입력한 여러개의 문자를 putchar는 한개씩 출력을 해주기에 사용자가 보기에는 한번에 문자열을 입력받고
  한번에 문자열을 출력해주는것 처럼 보이는 것이다.

❗️buffer의 개념은 매우 중요하므로 잘기억해두자

☝️if문, for문 등 expression부분에 사용되는 비교 연산자 중 요긴하게 쓰이는 '||'와 '&&'가 있다.
ㄴ '||'는 또는 이라는 의미, '&&'는 그리고의 의미를 가지고 있다.

ex)
if(ch == 'F' || ch == 'f')
ㄴ ch가 'F'랑 같거나 또는 'f'랑 같다면을 의미

if(ch <= 0 && ch <= 9)
ㄴ ch가 '0'보다 크거나 같고, '9'보다 작거나 같다면을 의미

===================================================================================================

#ctype.h 문자 함수들

-ctype.h
ㄴ 이 헤더파일안에는 문자들에관한 함수들이 모여있다.
ㄴ 대문자를 소문자로, 소문자를 대문자로 바꿔주는 함수, 해당 문자가 숫자인지 문자인지를 판별해주는 함수 등등
ㄴ 그리고 이 함수글은 한글자씩 대응되며 작동한다.

-함수 종류

 1. int isalnum(int c) : 해당 문자가 알파벳 또는 숫자 인가?
 2. int isalpha(int c) : 해당 문자가 알파벳인가?
 3. int iscntrl(int c) : 해당 문자가 컨트롤 문자인가? ☝️컨트롤 문자 => 아스키 코드에서 000~037까지의 문자를 가리킴
 4. int isdigit(int c) : 해당 (10진수)문자가 숫자인가?
 5. int isgraph(int c) : 해당 문자가 특수기호인가?
 6. int islower(int c) : 해당 문자가 소문자인가?
 7. int isprint(int c) : 해당 문자가 출력이 가능한가? ☝️출력가능한 문자 => 문자, 숫자, 기호(문장부호/구두점), 빈칸 등
 8. int ispunct(int c) : 해당 문자가 문장부호/구두점 인가?
 9. int issapce(int c) : 해당 문자가 빈칸인가?
10. int isupper(int c) : 해당 문자가 대문자인가?
11. int isxdigit(int c) : 해당 문자가 16진수인가? ☝️정확히는 16진수를 표현할때 사용하는 문자인가?
12. int tolower(int c) : 해당 문자를 소문자로 전환
13. int toupper(int c) : 해당 문자를 대문자로 전환

===================================================================================================

#다중 선택 else if

-else if
ㄴ 조건문을 사용할때 특정 구간을 설정해서 해당 구간의 조건에 부합하는지 아닌지를 판별하고플때 사용하면 편리하다.
ㄴ 예를 들어서 10보다 작은지?, 10보다 크고 15보다는 작은지?, 15보다는 크고 20보다는 작은지?와 같은 구간을 나눠서 판별할때 사용한다.
ㄴ 이걸 if문으로 구현하면 if(i <= 10), if(i > 10 && i <= 15), if(i > 15 && i <= 20)
ㄴ 이런식으로 비교 연산자를 계속 사용해야하는 번거로움이 있다.
ㄴ 반면에, else if를 사용하면 if(i <= 10), else if(i <= 15), else if(i <= 20)
ㄴ 이와같이 &&를 사용할 필요가 없다, 첫번째 if에서 false가 나왔으면 자동적으로 i는 10보다는 크다라는 전재가 깔리고
ㄴ 다음 조건문으로 향하게되기때문에 단순 if을 여러번 쓸때와는 좀 더 간결하고 편리하다

☝️소득에따른 세금을 물리는 종합소득세 계산기를 만들어 보자!

===================================================================================================

#if와 else 짝지어보기

-if와 else 인덴팅 맞춰주기
ㄴ if문과 else문을 자주 사용하게되는 작업을 할때는 항상 if문과 else문의 영역을 잘구분지어주고
ㄴ 어떤 if문에대한 else문인지도 인덴팅을 통해서 자주 확인해주어야한다.
ㄴ 물론 컴파일러가 상당부분 도와주어 큰문제는 없겠지만 그래도 작업자가 유의해서 코드를 작성하여야한다.

⚠️ 1. else문은 인덴팅에 관계없이 자신과 가장 가까운 if문과 짝지어진다!
   2. 작업할때 혼동의 여지가 있다면 괄호를 적극 활용하자! ==> 이것이 best!

===================================================================================================
