#분기문 if

-if(조건문)
ㄴ if문의 기본 형태 -> if(expression)
		    statement
ㄴ expression이 true면 statement를 실행, false면 실행하지 않는다.
ㄴ 자신이 여러개의 조건문을 사용하고 싶다면 if문을 여러개 사용하면 된다.

-else
ㄴ else는 if문이 false라면 else문에 작성된 statement가 실행된다.
ㄴ if문에 사용되는 연산이 여러번하는 것을 줄여줌

===================================================================================================

#표준 입출력 함수 getchar(), putchar()

-getchar(int)
ㄴ 한글자를 가져오는 함수


-putchar(int)
ㄴ 한글자를 출력하는 함수

ㄴ 둘다 int형을 사용하는 이유는 아스키 코드를 사용하기 위함이다.
ㄴ getchar와 putchar를 사용하면 문자열도 간단하게 출력이 가능한데 그 이유는 배열로 문자열 처리하는게 아닌, 한글자씩 처리하기 때문이다.
ㄴ 이 과정을 좀 더 설명하자면, getchar함수는 사용자로부터 한글자를 입력받는데,
  실제로 사용하면 한번에 여러개의 글자를 입력해도 된다. 이때 'buffer'라는 개념이 사용되는데 buffer는 임시 저장소이다.
  여튼, buffer에 사용자가 입력한 여러개의 문자를 putchar는 한개씩 출력을 해주기에 사용자가 보기에는 한번에 문자열을 입력받고
  한번에 문자열을 출력해주는것 처럼 보이는 것이다.

❗️buffer의 개념은 매우 중요하므로 잘기억해두자

☝️if문, for문 등 expression부분에 사용되는 비교 연산자 중 요긴하게 쓰이는 '||'와 '&&'가 있다.
ㄴ '||'는 또는 이라는 의미, '&&'는 그리고의 의미를 가지고 있다.

ex)
if(ch == 'F' || ch == 'f')
ㄴ ch가 'F'랑 같거나 또는 'f'랑 같다면을 의미

if(ch <= 0 && ch <= 9)
ㄴ ch가 '0'보다 크거나 같고, '9'보다 작거나 같다면을 의미

===================================================================================================

#ctype.h 문자 함수들

-ctype.h
ㄴ 이 헤더파일안에는 문자들에관한 함수들이 모여있다.
ㄴ 대문자를 소문자로, 소문자를 대문자로 바꿔주는 함수, 해당 문자가 숫자인지 문자인지를 판별해주는 함수 등등
ㄴ 그리고 이 함수글은 한글자씩 대응되며 작동한다.

-함수 종류

 1. int isalnum(int c) : 해당 문자가 알파벳 또는 숫자 인가?
 2. int isalpha(int c) : 해당 문자가 알파벳인가?
 3. int iscntrl(int c) : 해당 문자가 컨트롤 문자인가? ☝️컨트롤 문자 => 아스키 코드에서 000~037까지의 문자를 가리킴
 4. int isdigit(int c) : 해당 (10진수)문자가 숫자인가?
 5. int isgraph(int c) : 해당 문자가 특수기호인가?
 6. int islower(int c) : 해당 문자가 소문자인가?
 7. int isprint(int c) : 해당 문자가 출력이 가능한가? ☝️출력가능한 문자 => 문자, 숫자, 기호(문장부호/구두점), 빈칸 등
 8. int ispunct(int c) : 해당 문자가 문장부호/구두점 인가?
 9. int issapce(int c) : 해당 문자가 빈칸인가?
10. int isupper(int c) : 해당 문자가 대문자인가?
11. int isxdigit(int c) : 해당 문자가 16진수인가? ☝️정확히는 16진수를 표현할때 사용하는 문자인가?
12. int tolower(int c) : 해당 문자를 소문자로 전환
13. int toupper(int c) : 해당 문자를 대문자로 전환

===================================================================================================

#다중 선택 else if

-else if
ㄴ 조건문을 사용할때 특정 구간을 설정해서 해당 구간의 조건에 부합하는지 아닌지를 판별하고플때 사용하면 편리하다.
ㄴ 예를 들어서 10보다 작은지?, 10보다 크고 15보다는 작은지?, 15보다는 크고 20보다는 작은지?와 같은 구간을 나눠서 판별할때 사용한다.
ㄴ 이걸 if문으로 구현하면 if(i <= 10), if(i > 10 && i <= 15), if(i > 15 && i <= 20)
ㄴ 이런식으로 비교 연산자를 계속 사용해야하는 번거로움이 있다.
ㄴ 반면에, else if를 사용하면 if(i <= 10), else if(i <= 15), else if(i <= 20)
ㄴ 이와같이 &&를 사용할 필요가 없다, 첫번째 if에서 false가 나왔으면 자동적으로 i는 10보다는 크다라는 전재가 깔리고
ㄴ 다음 조건문으로 향하게되기때문에 단순 if을 여러번 쓸때와는 좀 더 간결하고 편리하다

☝️소득에따른 세금을 물리는 종합소득세 계산기를 만들어 보자!

===================================================================================================

#if와 else 짝지어보기

-if와 else 인덴팅 맞춰주기
ㄴ if문과 else문을 자주 사용하게되는 작업을 할때는 항상 if문과 else문의 영역을 잘구분지어주고
ㄴ 어떤 if문에대한 else문인지도 인덴팅을 통해서 자주 확인해주어야한다.
ㄴ 물론 컴파일러가 상당부분 도와주어 큰문제는 없겠지만 그래도 작업자가 유의해서 코드를 작성하여야한다.

⚠️ 1. else문은 인덴팅에 관계없이 자신과 가장 가까운 if문과 짝지어진다!
   2. 작업할때 혼동의 여지가 있다면 괄호를 적극 활용하자! ==> 이것이 best!

===================================================================================================

#소수 판단 예제

-입력한 정수가 소수인지 아닌지를 판단하는 프로그램을 만들어 보자
ㄴ 사용자로부터 정수 1개를 입력받으면
ㄴ 2부터 입력받은 수 - 1 까지의 수를 차례로 나머지 나눗셈을 하면서 나머지가 0으로 안나오면 소수
ㄴ 그렇지 않으면 소수가 아님을 출력해주는 코드를 작성해보자

-입력한 정수의 모든 약수를 구하는 프로그램을 만들어 보자
ㄴ 소수 판단프로그램에서 정수를 나머지 나눗셈을하는 반복문에서 코드를 추가해주면 된다.

===================================================================================================

#논리 연산자(Logicla_Operators)

-&&
ㄴ and를 의미하는 연산자이다.
ㄴ 이항 연산자이다.

-||
ㄴ or를 의미하는 연산자이다.
ㄴ 이항 연산자이다.

-!
ㄴ not을 의미하는 연산자이다.
ㄴ 단항 연산자이다.
ㄴ 단항 연산자이기때문에 연산자 우선순위가 높다.

☝️많은 양의 연산자를 사용하게 될때는 괄호와 주석을 적극적으로 사용해서 가독성을 향상시키자!

❗️논리 연산은 왼쪽에서 오른쪽으로 연산된다.
ㄴ &&에서 좌측항이 false가 나오면 우측항은 연산을 하지도 않음 => Short-circuit Evaluation

-&&와 ||는 sequence point이다!
ㄴ 증감연산자를 사용할때 &&와 ||의 좌우측연산이 모두 끝나야 증감이 되는것이 아닌
ㄴ && 또는 ||를 만나면 증감연산을 바로한다.

ex)
int x = 1, y = 2;

if (x++ > 0 && x + y == 4)
	printf("%d %d", x ,y);
ㄴ 여기에서 x가 1로 시작해서 &&좌측 조건을 통과했고, &&를 만나면서 ++연산을 한다음 x + y == 4 조건을 검토한다.
ㄴ 따라서 x값과 y값을 출력하면 둘다 2로 출력된다.

-범위를 정해줄때 꼭 &&를 활용하자
ㄴ 우리가 초보때 실수하기 좋은 상황이 있다.

if(i >= 10 && i <= 20)를 if(10 <= i <= 20)으로 작성하는 경우이다.
ㄴ 물론 문법상에 오류는 없다.
ㄴ 다만 '문맥'상에 오류가 있어 사용자가 원하는 결과를 얻지 못한다.
ㄴ 전자의 경우 'i가 10이상 그리고 20이하' 라는 범위가 설정되지만
ㄴ 후자의 경우 if((10 <= i) <= 20)로 연산이 되며 해석하면 i가 10이상인가?, 20이하인가?로 해석이된다.
ㄴ 별차이 없어보이지만 0부터 100까지 i가 1씩 증가하면서 10이상 20이하의 수들만 출력하는 코드에 적용해보면
ㄴ 전자는 정상적으로 10부터 20까지 출력되는 반면, 후자는 0부터 99까지 출력이 된다. i의 현상태에 대해서만 검토하고
ㄴ 범위는 적용되지 않는다.

===================================================================================================

#단어 세기 예제

-글자, 단어, 줄 카운팅
ㄴ 사용자로부터 문자열을 입력받으면 해당 문자열의 글자수, 단어수, 줄수를 카운팅하여 출력하는 프로그램을 만들어보자
ㄴ '.' 을 입력받으면 더 이상 입력을 받지않는다.

-flag시스템
ㄴ bool타입을 이용하여 사용하는 시스템이다.
ㄴ 본 예제에서는 단어를 카운팅할때 깃발이 올라갔다가 단어가 끝나면 깃발이 내려가는 개념을 이용하여 단어수를 카운팅한다.
ㄴ 문장 수를 카운팅할때도 같은 시스템을 사용한다.
ㄴ 단어의 경우 빈칸, 줄바꿈이(isspace()함수를 사용) 아니면 flag가 true로 바뀌고 1개의 카운트가 올라간다.
ㄴ 그러다가 빈칸이나 줄바꿈을 만나면 flag가 false로 바뀌고 다음 단어를 카운팅할 준비를 한다.
ㄴ 줄수 카운트도 같은 시스템이다.

===================================================================================================

#조건 연산자 (Conditional Operator)

- ?
ㄴ 변수에 조건에 따라서 특정값을 대입하고 싶을때 사용하는 연산자이다.
ㄴ 유일한 삼항(ternary) 연산자이다

변수 = 조건문 ? 값1 : 값2;
ㄴ 이런 형식으로 사용한다.
ㄴ 조건문이 true면 값1이 변수에 대입되고 false면 값2가 변수에 대입된다.

- 주의 사항
ㄴ '?' 연산자의 연산 우선순위는 매우 낮다.
ㄴ 그래서 사용할때 가능하다면 조건문에 '()'를 사용하자!
ㄴ 가독성도 올라간다.

===================================================================================================

#루프 도우미 countinue와 break

-countinue
ㄴ 반복문에서 사용하는 기능이다.
ㄴ 반복문 속에서 특정 조건이 성립하면 continue를 하라고 할 수 있는데
ㄴ continue의 기능은 continue이후에 있는 루틴을 생략하고 다음 루틴으로 넘어간다.
ㄴ 정확히는 반복문의 카운트 증감 부분으로 넘어간다.

	✓ for( ; ; 이부분!)

☝️continue를 사용해서 오히려 코드가 길어지거나 복잡해지는 경우가 있다.
그럼 왜 continue라는 코드가 있는가 하면, 실무 혹은 복잡한 시스템을 다룰때
특정 조건에 해당하는 경우를 제외하는 것을 코드로 표현해야 사람들이 이해하기 쉽고 가독성도 올라간다.
그래서 결론은 2가지의 관점이 있다.
제외 조건을 표현해주어야 시스템 이해가 쉬워지는 경우, 오히려 코드가 길어지게되는 경우


-break
ㄴ continue와 같이 반복문에서 특정 조건을 성립하면 반복문을 탈출하는 기능이다.
ㄴ 보통은 무한 루프에 자주 사용된다.
ㄴ 무한 루프에서 조건에 부합하는 경우가 생기면 반복문을 그만두는 방식으로 사용된다.

☝️break의 기능은 반복문을 탈출하는 것인데 중요한것은 다중반복문에서 break를 사용하면
다음 예시처럼 작동한다.
ex)
	for( ; ; )
	{
	     for( ; ; )
	     {
		break;		---> 가장 안쪽의 for문만 탈출하고 바깥 for은 그대로 진행됨!
	     }
	}

-placeholder
ㄴ 딱히 무언가를 하지는 않지만 자리를 차지하여 유저에게 무엇인가 들어갈 수 있음을 알려주는 것들을 지칭

===================================================================================================

#최대, 최소, 평균 구하는 계산기

-사용자로부터 값을 입력받으면 입력받은 값들의 최대, 최소, 평균을 구하는 계산기를 만들어보자

1. 값을 입력받는다. 비정상적인 값이 입력되면 입력을 그만받고 계산결과 출력
ㄴ scanf의 return값을 이용한 while문을 사용한다.

2. 입력받은 값들을 최대, 최소를 매번 비교해준다.
ㄴ if문 혹은 조건 연산자를 이용해서 기존의 값과 새로운 값을 비교하여 최대, 최소를 구한다.

3. 평균값을 구하기위해 입력횟수를 카운트하고, 입력받은 값들을 계속 더한다.
ㄴ 카운터를 반복문안에 넣어서 추후에 사용한다.
ㄴ sum변수에 입력받는대로 더한다.

4. 출력받은 개수가 0보다 크면 최소, 최대, 평균을 출력, 아니면 출력하지 않는다.
ㄴ if문과 count를 이용해서 코드를 작성

5. 평균값은 sum / count로 구한다.

===================================================================================================

#switch와 case

-switch
ㄴ 정수형 변수(char, int)가 어떤 값을 갖는지에 따라서 다양한 선택을 하게해주는 함수

-case
ㄴ 정수형 변수가 들어오면 변수의 값에따라서 해당되는 case를 실행한다.
ㄴ 각 case에는 항상 break를 포함해서 모든 case가 실행되는 오류를 예방할것

-default
ㄴ 만약 들어온 정수형 변수에 해당하는 case가 없을경우 실행되는 부분이다.
ㄴ 이 부분은 break를 안써줘도 무방하다.

switch (c)
        {
            case 'a':
                printf("apple");
                break;

            case 'b':
                printf("baseball");
                break;

            case 'c':
                printf("cake");
                break;

            default:
                printf("nothing");
        }

위와 같은 방식으로 사용된다.

☝️if문으로도 구현할수는 있지만 몇가지 정도의 가짓수를 구현할때는 switch와 case를 사용하는 것이 좀 더 간결하게 작성이 가능하지만
복잡한 시스템에서는 if문 혹은 다른 방식을 채택하는 것이 일반적이다.

===================================================================================================

#goto문을 피하는 방법

❗️goto문은 더이상 실문에서 사용하지 않는다.

-goto
ㄴ 말그대로 해당 지점으로 가서 프로그램을 실행하는 방식의 함수이다.
ㄴ 과거에는 많이 사용했지만 지금은 if, while 등등의 다른 기능들로 대체되어 사용하지 않는다.
ㄴ CPU가 프로그램을 실행할때 사실상 goto문처럼 실행하기때문에 과거에 많이 사용되었다.
ㄴ 지금은 사람이 유지 보수하기 편한 방식으로 바뀜.

✓ 그냥 이런게 있구나 정도로만 지나가면 될듯하다.
