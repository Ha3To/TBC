#입출력 버퍼

-버퍼
ㄴ 우리가 입력을하거나 출력을 할때 한개한개 나눠서 하지않고, 한번에 뭉텅이로 입출력하는게 더 효율이 좋다.
ㄴ 입력 -> 입력할 때마다 한 글자 씩 버퍼로 이동 -> 버퍼에 담긴 내용이 통째로 전달 -> 출력
ㄴ 위 과정을 거친다.

❗️버퍼가 없다면 한글자를 입력과 동시에 출력이 된다. 그리고 입출력 작업이 시간이 많이 걸리는 작업중 하나이기때문에
매순간 입출력을 한다면 비효율적이다. 그래서 버퍼가 존재하는것이다.

※ 버퍼(메모리 공간)의 크기는 시스템을 만드는 사람에의해 결정된다.
※ 버퍼에서 때가되면 버퍼를 통째로 넘겨주는 방식인데 그럼 이 때는 언제를 말하는 건가하면
 1. 버퍼가 다 찼을때 (버퍼는 그렇게 크지 않다. 보통 512byte, 4096byte)
 2. 버퍼에 '\n'(엔터)가 들어오면 넘겨주는 방식 (제일 보통의 방식이다.)

-_getch(), _getche()
ㄴ putchar()를 같이 사용한다.
ㄴ 위 두개의 함수는 버퍼를 사용하지않는 입력함수이다.
ㄴ 전자는 사용자가 무엇을 입력하고있는지 콘솔창에 띄워주지않고 바로 putchar()로 출력하는 방식이고
ㄴ 후자는 사용자가 무엇을 입력하고있는지도 콘솔창에 띄워주고, 입력받은 문자를 putchar()를 통해 출력된 것도 바로 띄워주는 방식

ㄴconio.h에 들어있으며, 윈도우에서만 사용가능.

ex)	_getch()		_getche()

입력	  abc		   abc


출력	  abc		  aabbcc

☝️여기서 '출력'은 콘솔창에 표시되고있는 문자를 의미합니다.

===================================================================================================

#파일의 끝

-EOF
ㄴ End Of File의 약자로 stdio.h에 들어있는 함수이다.
ㄴ EOF는 -1의 값을 가지고있다.
ㄴ 사용자가 컴퓨터한테 입력이 다끝났음을 알려줄때 사용하는 함수이다.
ㄴ 원리는 아스키코드에 음수가 없음을 이용하는 것이다. 우리가 getchar()를 사용할때 int형을 사용한다.
ㄴ 아스키코드에는 음수가 없는데 왜 int형을 사용하는가? 하면 getchar()는 입력이 끝나면 음수를 리턴해준다.

int c;

while((c = getchar()) != EOF)
	putchar(c);

ㄴ 위 처럼 조건문을 통해 사용자로부터 입력이 끝났음을 알수있는 하나의 루트를 만들 수 있다.
ㄴ 여기서 입력이 끝났음을 알려주는 역할은 운영체제가 한다.

☝️콘솔입력과 파일의 입력의 끝나는 방식은 동일하다.

ㄴ EOF작동방법은 입력을 다하고 줄바꿈후에 윈도우에서는 CTRL + Z하고 ENTER, MAC에서는 CTRL + D

-stream
ㄴ 사전적의미에는 '흘러가다'이다. 컴퓨터에선 '데이터'가 흘러간다 정도의 의미를 가지고있다.
ㄴ 우리가 콘솔에서 입출력을할때 문자-숫자들도 데이터이다. 이 데이터가 '흘러서'프로그램으로 들어간다.
ㄴ 후에 배우는 file에서도 file속 데이터가 흘러서 프로그램으로 가고 혹은 그 반대로 데이터가 흐르는 흐름을 stream이라고한다.
ㄴ 근데 이 stream(데이터의 흐름)이 끝나는 것을 알려주는게 EOF이다.

===================================================================================================

#입출력 방향 재지정 (Redirection)

-exe파일 콘솔창에서 여는 방법

※(윈도우 visual studio 기준)
 1. cmd창을 열고, 작업한 project의 위치로 간다
 2. 해당 project 디렉토리에서 실행하길 원하는 실행파일을 찾는다.
 3. 파일이름.exe를 치고 엔터를 치면, 실행파일이 정상적으로 실행된다.

※(맥 Xcode 기준)
 1. Xcode 상단 옵션바에서 Product - Archive를 누르고 distribute contents를 클릭 후 원하는 위치에 컨펌을 한다.
 2. 콘솔열고 아카이브를 만들었던 위치로 이동하고 실행파일을 찾는다.(VS와는 다르게 좀 깊숙히 있다;;)
 3. 실행파일을 찾았다면 open 실행파일이름 치고 엔터를 치면 새로운 콘솔위도우에서 실행됨을 확인할 수 있다.

===================================================================================================

#사용자 인터페이스

-사용자에게 친절한 인터페이스를 만들자
ㄴ 개발자가 프로그램을 만들면 사용자는 기상천외한 방법으로 그 프로그램을 사용한다.
ㄴ 개발자가 예상하지 못한 방식으로 프로그램을 사용하면 당연히 버그나 오류가 난무하게될것이다.
ㄴ 그래서 개발자의 의도대로 사용자들이 프로그램을 사용하도록 인터페이스를 친절히 만들어야한다.
ㄴ 그리고 사용자가 어떤 방식으로 프로그램을 사용하게 될까?를 고민하면서 가능한 모든 경우를 대비한 코드를 짜는 것이 좋다.

===================================================================================================

#숫자와 문자를 섞어서 입력받기

-이중 반복문
ㄴ 앞서 배웠던 이중 반복문을 for문으로 구현하여, 문자 - 행 - 열 순으로 입력받아서
ㄴ 출력까지하는 프로그램을 만들어보자
ㄴ 해당 기능을 수행하는 함수는 미리 선언한 형태로 만들 것

※scanf는 버퍼에 \n을 남겨놓는 특징이 있다. 그래서 연속적으로 해당 프로그램을 실행하면 콘솔창에 의도치않은
줄바꿈이 나타나므로 해당 부분을 예방하는 코드도 추가하자

※scanf는 입력중간에 프로그램을 종료할 수 없다. \n이 입력되면 프로그램을 종료하도록 코드를 짜도 scanf가 입력받기로한
데이터를 다 입력받아야 앞서 입력된 \n이 인식이되면서 종료된다. 그래서 \n을 인식하도록하는 부분은 따로 입력을 받도록 하자!

===================================================================================================

#입력 확인하기

-사용자로부터 입력을 받고 제대로된 입력이면 출력, 그렇지않으면 사용자가 잘못 입력한 것을 출력해 보여주고, 다시 입력하도록 하기
ㄴ 정수를 입력하도록 한다.

while(scanf("%ld", &input) != 1)
    {
        printf("Your input - ");
        
        while((c = getchar()) != '\n')		----> 버퍼를 비워주는 부분
            putchar(c);// input left in buffer
        
        printf(" - is not an integer. Please try again.\n");
    }

ㄴ scanf의 리턴값을 이용해 제대로된 입력이 판별한다.
ㄴ 그렇지 않으면 while문으로 들어가서 다시 입력하도록한다.
ㄴ 여기서 scanf의 특성상 기존에 입력했던 것들이 버퍼에 그대로 남아있어서 버퍼를 비워주는 기능을 추가한다.

☝️ 특정한 기능을 수행하는 부분은 함수로 정리해서 main문에서는 해당 함수만 호출하도록 하자!
ㄴ 사용자를 배려하는 프로그래밍이 중요하다!

===================================================================================================

#입력 스트림과 숫자

-scnaf와 getchar
ㄴ scanf는 space를 기준으로 입력을 받지만
ㄴ getchar는 한글자단위로 입력을 받는다.

+) scanf는 자료형에 따라서 사용자의 입력을 인식하는 기준이 다르다
int형을 입력을 받는다고 했는데 double형 자료를 입력하면 소수점부분에서 입력이 끝났다고 인식하고
소수 부분은 버퍼에 남겨둔다.
ㄴ 버퍼에 남겨진것들은 getchar, putchar로 확인이 가능하다.

+) getchar는 곧이곧대로 받아들인다.(빈칸도 인식한다)

===================================================================================================

#메뉴 만들기 예제

-사용자에게 4가지 옵션을 주는 UI를 만들어서 출력한다.

Enter the letter of your choice:
a. avengers     b. beep
c. count        q. quit

ㄴ 이렇게 출력하도록 한다.
ㄴ 여기서 사용자의 입력에 따라 실행되는 코드가 다르다.
ㄴ 사용자의 입력에 따라 정해진 루트를 타야하므로 switch함수를 이용하자

-a
ㄴ a를 입력하면 "Avengers assemble!"이라는 문구가 출력되어야한다.

-b
ㄴ b를 입력하면 경고음이 한번 나야한다.
ㄴ \a가 경고음이다.

-c
ㄴ c를 입력하면 "Enter an integer:"라는 문구가 나오고 정수를 한개 입력받는다.
ㄴ 이부분은 함수로 작성해서 main문 switch에서 해당 함수만 호출하여 사용하도록 한다.
ㄴ 기능은 입력받은 정수를 오름차순으로 차례로 출력하는 기능을 만들면 된다

Enter an integer:
3 --> 입력
1
2
3 --> 출력
ㄴ 이런식으로 입력과 출력이 이뤄지면 된다.

-q
ㄴ q를 입력받으면 프로그램을 종료한다.

❗️q를 제외한 모든 case는 이 프로그램이 반복되도록 하여야하고, 이상한 입력이 들어오면 다시 입력하도록 하여야함

===================================================================================================
