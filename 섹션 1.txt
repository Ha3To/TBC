#C언어의 탄생

-벨 연구소에서 탄생
ㄴDennis Ritchie와 Ken Thompson이 유닉스를 기반으로 만들었음

=====================================================

#C언어의 특징

-운영체제를 만들던 언어라 프로그램의 효율성을 높일 수 있다.

-강력하면서도 유연하다

-프로그래머 중심이다

-다른 시스템으로 이식하기 좋다

※C와 C++은 장단점을 공유한다.

-C언어가 쓰이는 곳
ㄴUnix OS
ㄴ컴퓨터 게임
ㄴ루카스 필름
ㄴ임베디드 시스템

=====================================================

#C언어의 표준

-K&R C(classic C)
ㄴ유닉스와 함께 제공된 라이브러리(미리 만들어진 기능모음)가 사실상 표준

-ANSI(C89), ISO(C90)
ㄴ국제적인 문자 집합 추가
ㄴ64비트 프로세서 대응
ㄴ과학 공학 수치 계산 적합도 개선(Fortran 대체)
ㄴ언어를 단순하게 유지

※C언어는 보수적인 언어이다. 그래서 C++를 키우는데에 일조하게됨

-The C11 Standard
ㄴC99의 일부를 선택적인 기능으로 변경
*표준을 줄이면 각각의 시스템에서 최적화하기 편해짐
ㄴ멀티 프로세서 대응 concurrent programming
*코어의 연산능력을 키우는 것보다는 코어의 개수를 늘려가는 것에 집중

-The C18 Standard
ㄴ새로운 기능 추가 없이 C11의 결함 수정

=====================================================

#소프트웨어 개발의 7가지 단계

1. 프로그램의 목적을 정의한다.

2.프로그램을 설계한다.

3. 코드를 작성한다.

4. 컴파일을 한다.
ㄴ'컴파일러'라는 사람이 작성한 코드를 컴퓨터가 이해할수있는 언어로 변환해주는 프로그램을 사용하는 것

5. 실행해보기
ㄴRun한다고 표현함

6. 테스트해보고 오류가 있다면 수정한다.
ㄴ오류는 사실 거의 항상 나오기에 천천히 수정한다.
ㄴ이를 '디버깅'이라고 한다.
ㄴ이부분이 프로그래밍의 많은 부분을 차지한다.

7. 프로그램을 유지하고 개선해 나간다.
ㄴ실무에서는 이 부분이 업무의 많은 부분을 차지함

=====================================================

#통합개발환경(IDE)

-프로그래밍 과정
ㄴ소스코드를 입력하고 프로그램을 실행만 사용자가하고 나머지 부분들은 IDE가 해줌

1. 문서 편집기
ㄴ사용자가 작성한 코드를 문서 편집기로 편집해서 파일의 형태로 저장해줌
ㄴC로 만든 소스코드면 확장자는 xxx.c로 저장, C++로 만든 소스코드면 xxx.cpp로 저장

2. 컴파일러(+링커)
ㄴ사람이 작성한 코드를 컴퓨터가 읽을 수 있도록 실행파일(실행코드)로 변환해줌
ㄴ확장자는 .exe임(윈도우에서만)
ㄴ다만 C와 C++에서는 '링커'라는 프로그램이 또 있음

-통합개발환경 종류(IDE)
ㄴVisual Studio(윈도우)(C, C++, Python, Java 등등)
ㄴXcode 10(맥os)
ㄴEclipse(Java)
ㄴCodeBlocks(C)

※IDE별로 조금씩 다름 다만 우리 수준에서는 어디서하나 ㄱㅊ
ㄴ따배씨에서는 Visual Studio사용

=====================================================

#비주얼 스튜디오 설치

-구글에 비주얼 스튜디오 검색해서 쓰면됩니다.
ㄴ커뮤니티 버전 하면됨

-인스톨러에서 C++을 다운을 받으면됩니다.
ㄴC도 같이 쓸수있게됨
ㄴ인스톨러는 나중에 얼마든지 수정할수있음

-영어 팩을 다운받아서 쓰는게 좋음
ㄴ한국어 팩도 있지만 영어 쓰셈

-파일과 경로 이름에 영어만 쓸것
ㄴ나중에 예기치 못한 에러를 방지

-마소계정을 만들고 등록 할것

=====================================================

#VS2019의 기본적인 사용법

-C++강의를 대비해서라도 최근 버전을 사용하자!

-영상보고 따라할것!

=====================================================

#C언어와 함수

-함수란?
ㄴ입력(Input) -> 함수(Function) -> 출력(output)
ㄴ입력을 특정한 방식(기능)으로 가공하여 출력하는 것
ㄴ프로그래밍은 함수들끼리의 협력을 만드는 것

※함수는 입력이 1개만 혹은 여러개 혹은 없을 수 있으며 출력 또한 1개, 여러개 혹은 없을 수 있다.

-code 0
ㄴreturn 0;라고 쓰인 코드는 컴퓨터가 사용자로부터 'c'언어를 통해서 '0'을 잘받았다는 의미이다. = 프로그램이 성공적으로 실해되었음을 의미합니다.

※다만 return '숫자';에서 숫자부분은 프로그램을 설계한 사람에따라 숫자별로 의미를 다르게 부여 할수있다는 것을 인지하자
ㄴ보통은 return 0;은 성공, return 1;는 실패 이런식

-main
ㄴ운영체제가 프로그램을 실행시킬때 'main'함수를 가장 먼저 찾음
ㄴ이름에서 알 수 있듯 가장 주된 함수라는 의미이기때문
ㄴ나중에 실력이 좋아지면 프로그램을 만들때 main함수문에 각기다른 함수들만 작성해서 짧게 코딩하게됨

※함수의 이름은 사용자가 임의로 만들수있지만 main함수만큼은 이름 변경 불가

-int
ㄴ자료형 중 한개임 여기서는 정수 자료형임을 의미
ㄴ영상을 보고 코드를 만든다면 return '숫자';로 코드를 썻을텐데 이때 '숫자'가 정수임 즉 return 값을 정수로 돌려주겠다는 의미를 가지고 있는 부분이다.

=====================================================

#컴파일러(Compiler)와 링커(Linker)

-고수준 프로그래밍 언어
ㄴ여기서의 고수준은 좋다 나쁘다의 의미가 아님
ㄴ추상적인, 인간에게 좀더 가깝다는 의미
ㄴ반대로 저수준 프로그래밍 언어는 컴퓨터가 이해하기 쉬운 언어

-컴파일러와 링커가 하는 일
ㄴ컴파일러는 소스 코드를 번역하는 일을 담당
ㄴ이때 .c파일 하나당 .obj파일를 생성함 = 컴파일해야할게 많으면 나눠서 해야하기 때문
ㄴ이때 여러개 생긴 .obj파일들을 연결해주고 최종적으로 실행 파일을 만들어주는게 링커의 역할

※모든 언어가 링커를 가지고있는건 아님

-라이브러리
ㄴ우리가 모든 함수를 그때마다 만들어서 사용하기에는 소요가 크니 미리 만들어둔 함수 모음이라고 생각하면 편함
ㄴ링커는 라이브러리에서 필요한 함수를 찾아서 넣어줌

-착수(start-up) 코드
ㄴ프로그램을 실행하기전 기본적으로 필요한 요구사항이 들어있는 부분
ㄴ이 또한 컴파일러가 프로그램에 넣어주고 링커가 연결해서 실행 파일로 만들어줌

-#include <stdio.h>
ㄴ자신의 프로그램에 원하는 함수를 쓰기전에 미리 내가 이런이런 함수모음을 라이브러리에서 가져다가 쓰겠다고 선언해주어야함
ㄴ#include = 이런이런 함수를 내 프로그램에 포함해라
ㄴ<stdio.h> = standard input output의 줄임말로 표준 입출력 함수 모음이라는 의미

=====================================================