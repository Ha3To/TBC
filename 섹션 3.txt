#데이터와 자료형

자료형은 크게 정수 자료형과 실수 자료형으로 나눠져있는데 자료형이 나눠져있는 이유는 적절한 크기의 메모리를 데이터에 할당해주기 위해서이다. 뭐든지 그냥 크게크게 할당해주면 속도가 많이 느려진다.
ㄴ닭잡는데 소잡는 칼을 쓰지않는 것처럼

※문자형(char)은 정수 자료형으로 분류되어있다.

=========================================

#변수(variable)와 상수(constant)

-int angel = 1004;

int           angel     =    1004;
ㄴ자료형   ㄴ변수          ㄴ리터럴 상수

int는 자료형을 나타내고, 'angel'은 변수의 이름을 나타내는데 angel은 무언가를 의미하는데 쓰인다 근데 그 의미하는 바는 언제든 바뀔수있으므로 '변수'라고 지칭한고, 1004는 1004라는 값을 문자그대로 의미하고있으니 '리터럴 상수'라고 한다.


     자료형       리터럴 상수
          |                 |
-const int angel = 1004;
    |            |
한정자     기호적 상수
제한자      Symboilc constant
Qualifier

const라는 키워드를 사용하면 변수의 값을 바꿀수없게 된다. 이말은 즉슨 변수가 변할수가없게된다는 것 이때 angel은 변수가 아닌 '기호적 상수'가 되어버린다. angel의 값을 바꾸려하면 컴파일러가 컴파일 해주지 않는다 문법오류가 나버린다.

=========================================

#scanf()함수의 기본적인 사용법

-scanf()
ㄴscanf는 사용자로부터 입력을 받도록하는 함수임
ㄴ다만 VS에서는 scanf를 사용하려면 "_CRT_SECURE_NO_WARNINGS"를 definition해주거나, 전처리기 세팅에 미리 설정을 해주어야 함(VScode에서는 이런거 필요없음)



-&(ampersand)를 왜 써주는 가? + _CRT_SECURE_NO_WARNINGS를 왜 써주는 가?

ㄴ변수의 주소를 넘겨주기위해

ㄴscanf함수에서 사용자가 무언가를 입력하면 주소에 해당하는 메모리에 값을 덮어쓴다.

ㄴ근데 이게 해당 메모리에만 값을 덮어쓰기 해야하는데 다른 메모리에다가도 덮어써버린다. 이러면 이후에 해킹에 매무 취약하다는 단점이 생긴다. 그래서 scanf_s()함수를 사용하기를 권장함

ㄴ&가 붙으면 변수의 주소를 알고싶을때 사용한다. scanf함수에게 변수의 주소를 알려준다 그러면 scanf함수가 메모리에 직접 접근할수있게된다. 왜냐하면 scanf는 사용자로부터 입력받은 값을 해당 메모리에 넣어줘야하기 때문이다. scanf함수가 끝나면 해당 변수의 값은 바껴있는 상태가 된다.

=========================================

#간단한 입출력 프로그램 만들기

-&와 자료형
ㄴ%c = character
ㄴ%d = decimal, integer number
ㄴ%e = exponential floating-point number
ㄴ%i = integer
ㄴ%o = octal number
ㄴ%s = string character
ㄴ%u = unsigned decimal number
ㄴ%x = number in hexadecimal
ㄴ%% = printf a percent sign
ㄴ\% = printf a percent sign

=========================================

#정수와 실수

-정수(Integers)
ㄴ음의 정수, 0, 양의 정수
ㄴ2, -15, 369
ㄴ내부적으로 2진수

-실수(Real numbers)
ㄴ2.0, 3.16, 2.74, 0.123
ㄴ내부적으로 '부동 소수점(floating point)'표현법 사용
ㄴ3.14 = 3.14E0 = 3.14e0 = 0.314E1 = 31.4E-1
ㄴ내부적으로 2진수

※ E = Exponent(지수)
0.314E1 = 0.314 * 10^1
3.14E123 = 3.14 * 10^123
0.314E-1 = 0.314 * 10^-1
ㄴ이렇게 표현하는 방법이 '부동 소수점 표현법'
ㄴ여기서 '부동'은 움직이지 않는 부동이 아닌 떠다닌다는 뜻의 부동임 그래서 소수점이 움직인다해서 같은 숫자라도 여러가지 표현법이 있다는 뜻

-실수 2진수 표현법
소수점을 기준으로 왼쪽은 2^n+1로 각 자리를 계산하면되고 오른쪽은 2^-n+1로 계산한다.

-32bit Single Precision

float a = 1.234f;
ㄴ'부동'이라는 의미를 나타내기위해 float라는 이름을 가지게됨
ㄴfloat는 숫자뒤에 f를 붙임

1bit = sign
8bit = exponent
23bit = fraction
total = 32bit

-64bit Double Precision

double pi = 3.141592;
ㄴfloat의 2배라서 double이라는 이름을 가지게됨
ㄴdouble은 숫자뒤에 d안붙임

1bit = sign
11bit = exponent
52bit = fraction
total = 64bit

※float이나 double를 이용하는 연산은 bit의 구성을 봐서 알겠지만 복잡해서 연산도 당빠 정수연산보다 오래걸린다 그래서 float나 double을 남발하는 프로그래밍은 지양하자

=========================================

#정수의 오버플로우(Overflow)

-overflow란?
ㄴ할당가능한 범위를 벗어나는 상태

overflow가 발생하면
ex) 1111 + 1 = 10000이 되어야 하지만 자료형이 4비트까지만 표현가능하다면 늘어난 자리의 1은 잘리고 나머지 0000만 표현된다.
반대로 0000 - 1 은 할수가 없지만 마치 10000 - 1인것처럼 연산을 하게되고 결과는 1111로 나온다.

※형식 지정자를 잘 확인하고 사용해야 overflow가 발생하지않는다

=========================================

#이식성이 높은 고정 너비 정수형

프로그램을 만들때 서로가 사용하는 플랫폼의 자료형이 규정하는 크기가 다르다면 이식하는데에 어려움을 겪게되는데 그런 점을 해결하기위해 '고정 너비 자료형'을 사용한다.

-#include <stdint.h>
ㄴ고정 너비 정수형들이 담겨있는 헤더파일이다.

-#include <inttypes.h>
ㄴ고정 너비 정수형들의 각각에 해당하는 형식 지정자가 담겨있는 헤더파일이다
ㄴ여기에 stdint.h도 포함되어있어 inttypes.h만 include해줘도 됨

=========================================

#문자형

컴퓨터는 문자들도 2진수로 바꿔서 '정수'처럼 처리하기 때문에 각각의 문자들에 대응하는 '숫자'가 존재하는데 이것을 ASCII(아스키)라고 부른다.

-ASCII
ㄴ각각의 문자들에 대응하는 10진수, 8진수, 16진수가 있다.
ㄴ그리고 '문자로서의 숫자'들도 있으니 혼동하지 말것
ㄴ문자 말고도 각종 효과음들도 포함되어있음

=========================================

#부동소수점형

-과학적 표기법
ㄴ과학계에서 천문학적인 숫자를 표현할때 사용하는 표기법이다.
ㄴ m * 10^n

m: significand
n: exponent

ex) 123.45 = 12345 * 10^-2 = 1.2345 * 10^2

-유효숫자
ㄴ우리가 믿고 사용할만한 크기(자릿수)를 말한다

ex) 유효숫자 5개 -> 1.2345(5개의 자릿수) * 10^2
     유효숫자 6개 -> 1.23450(6개의 자릿수) * 10^2

-Normalized significand
ㄴ 1.ㅁㅁㅁㅁ * 2^n
ㄴm이 1.ㅁㅁㅁㅁ으로 바뀌고, 10이 2로 바꼈다.
ㄴ컴퓨터에서 사용하는 과학적 표기법

