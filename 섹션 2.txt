#자료형이 필요한 이유

-자료형
ㄴ자료의 형태

1. 컴퓨터는 정수인지 실수인지 구분시켜주기 위해
ex)1과 1.0의 차이

2. 자료형에따른 적절한 메모리크기를 배정해주기위해
ㄴ메모리소모량, 연산속도의 차이가 생각보다 크다

-c에서 지원하는 자료형
ㄴint, short, char, double, float 등등

=========================================

#주석다는 방법

-주석을 다는 이유
ㄴ주석을 달아야 프로그램밍할때 쉽게 알아볼수있고, 이어서 할때 어디까지 했는지 알아차리기 쉬움 이외에도 타인이 코드를 볼때 이해하기 쉽다는 이유도 있음

1. /* 블라블라 */
ㄴ이건 시작할때 /*쓰고 쭉쓰다가 마지막에만 */하면 됨
ㄴ다만 블럭주석은 시작점과 끝점을 항상 잘 넣어야함

2. // 블라블라

=========================================

#함수만들어보기

함수를 만들때는 입력값, 반환값의 형태와 함수이름, 기능(body)이 필요하다

강의에 나오는 say_hello함수를 예로 들면

void        say_hello     (void)
ㄴ반환값  ㄴ함수이름   ㄴ입력값
{				|
	prnitf("Hello, World!\n");	|-> 함수의 몸체
}				|

이렇게 구성되어있다.

여기서는 반환값이 필요없으니 void를 사용했고 따라서 함수 마지막에 return은 넣어주지 않았다. 함수이름은 그 함수의 기능을 알수있는 이름으로 지어주었고, 이 함수에 별다른 입력이 필요하지않으니 입력값 부분에도 void를 사용해주었다.

-함수선언
ㄴ함수는 main문보다 위에 먼저 선언해주어야하는데 그래야 OS가 main문만 보고도 실행을 할수있기때문이다.

다만, 함수의 선언만 먼저해주고 정의는 main문보다 나중에 써줘도 되는 방법도 있다. 이게 가능한 이유는 선언을 먼저해주면 링커가 함수가 정의되어있는 부분을 연결해주기때문이다.

=즉 함수의 선언과 정의는 분리가 가능하다!

※함수를 만들다보면 함수 속에서 변수를 선언하고 값을 할당하고 연산하는 등의 작업을 할수도있는데 이때 변수의 유효범위는 해당 함수에만 유효하다! = main문에 x라는 변수와 함수안에 x라는 변수는 아예다른 변수다(사용자한테만 같은이름으로 보일뿐 컴퓨터한테는 아예다른 거임을 인지하자)

=========================================

#디버거(Debugger)

-디버거는 코드를 원하는 위치에서부터 한줄한줄 따라가면서 프로그램의 실행상황을 알수있는 기능(내 생각임)

-step into
ㄴ다음줄을 실행시킨다.
ㄴ만약 다음줄이 함수라면 해당 함수의 정의부분으로 간다.
ㄴ단축키는 F11

-step over
ㄴ다음줄을 실행시킨다.
ㄴ만약 다음줄이 함수라면 해당 함수의 정의부분으로 가지않고 실행만 하고 넘어간다.
ㄴ단축키는 F10

-step out
ㄴ그냥 끝까지 프로그램을 실행시켜버린다.
ㄴ단축키는 shift + F11

=========================================

#문법(Syntax) 오류와 문맥(Semantic) 오류

-문법(Syntax) 오류
ㄴ문법오류는 문맥오류에비해 쉽게 찾을 수 있다.

-문맥(Semantic) 오류
ㄴ문맥 문제는 찾기 어렵다

ex)아래 코드는 n1의 3제곱을 만드는 코드이다 오류를 찾아보자
#include <stdio.h>

int main()
{
	int n1, n2, n3, n4;
	
	n1 = 2;
	n2 = n1 * n1;
	n3 = n2 * n1;
	n4 = n2 * n1;

	return 0;
}

답은 n4 = n2 * n1; 이부분이 잘못되었다. n2대신에 n3가 들어가야n4가 n1의 3제곱의 값을 할당받을수있는데 n2가 들어가면서 n1의 2제곱값이 할당되어버렸다. 이는 잘못되었음에 틀림없지만 컴퓨터 입장에서는 문법상 잘못된것이 없어 프로그램은 정상적으로 작동하게된다. 이처럼 간단한 코드의 경우 문맥오류를 찾는게 쉽지만, 추후에 방대한 코드를 다룰때는 문맥오류를 찾는 것은 매우 어렵다.
그래서 이전 강의에서 사용법을 익혔던 디버거를 활용하여 오류를 찾던가 아니면 컴파일러가 도와주는 방향으로 코딩을 하자!

=========================================

#읽기 좋은 코드를 만드는 방법

-tap키(들여쓰기), 괄호위치, 줄바꿈, 주석달기, 띄어쓰기 등등
ㄴ특히 주석을 잘활용하자

-가독성이 좋은 코딩 스타일로 코딩하기
ㄴ좋은 코드들을 보면서 자신의 코딩 스타일을 교정하자

=========================================