#함수가 필요할 때

-함수가 왜 필요한가?
ㄴ 같은 기능을 여러번 작성하면 유지보수에서 불리하기때문에 함수를 이용한다.
ㄴ 함수를 사용하면 코드 수정이 수훨해진다.
ㄴ 그리고 기능을 확장해야할때 함수가 있으면 매우 깔끔해진다.

-함수를 언제 만들어야하는가?
ㄴ 시스템에서 같은 기능을 수행하는 코드가 여러번 나올때
ㄴ 추후에 변경의 여지가 있는 부분을 쉽게 고칠 수 있게 해놓을때

-프로그램을 만들때 신경써야하는 것
ㄴ 일반화라는 더 많은 경우에서 더 쉽게 정상 작동해야함
ㄴ 같은 기능이 여러번 나오면 안됨 (유지 보수가 어려워진다.)

-refactoring
ㄴ 함수를 사용하지 않는 시스템을 함수를 사용하는 시스템으로 바꾸는 것
ㄴ 똑같이 작동을하면서 이해하기쉽고 유지보수가 쉬운 코드로 바꾸는 것

☝️함수의 개수 또한 복잡하게 많으면 좋지않기에 '비슷한 기능'을하는 함수들은 매개변수에 변화를 줘서
함수를 통합하는 것도 좋다!
-> 함수의 함수

⚠️함수의 이름은 그 함수의 기능을 파악하기 쉬운 이름으로 짓는게 좋다.

===================================================================================================

#함수의 프로토타입

-블랙박스
ㄴ 블랙박스는 말 그대로 검은상자처럼 인풋과 아웃풋만 알 수 있고, 내부는 모르는 것을 의미한다.
ㄴ 복잡한 시스템에서는 함수의 종류와 사용량도 많기때문에 함수의 구체적인 기능을 다 알고있을 필요도 없고 그럴수도 없다.
ㄴ 그래서 함수에 어떤 인풋이 있고, 어떤 아웃풋이 있는지를 파악하고 원하는대로 조립하는 과정이 필요하다.

☝️그래서 함수의 인풋 아웃풋을 정하고 블랙박스의 내부를 채워나가는 방식으로 코딩을 하자

✓함수를 파악할땐 그 함수의 선언부를 확인하면 알 수 있다.

❗️함수에서는 컴파일과 링커 개념이 중요하다!

-프로토타입
ㄴ 함수를 main문보다 먼저 선언을 해놓는다.
ㄴ main문을 작성을하고, 먼저 선언해놓은 함수의 몸체를 main문 다음에 작성을 해주어도 컴파일과 링킹에 문제가 없다.
☝️많은 부분을 간단하게 작성을 한다면 [ 리턴값형 함수이름 (매개변수 자료형) ]의 형태로만 선언해주어도 상관없다.

-parameter(매개변수)
ㄴ 리턴형 함수이름 (parameter);
ㄴ 함수를 선언하는 부분에서 ()안에 들어가는 값들은 parameter로 함수 내부에서 사용되는 값들의 자료형을 의미
ㄴ 매개변수

-argument(인자)
ㄴ 함수이름(argument);
ㄴ 함수를 호출하는 부분에서 ()안에 들어가는 값들은 agument로 특정 값이 들어간다.
ㄴ 매개변수에대한 인자이다.

===================================================================================================
